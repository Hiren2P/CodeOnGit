//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace CsharpLibrary.ArithmeticService {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ArithmeticService.IContracts")]
    public interface IContracts {
        
        // CODEGEN: Generating message contract since the operation Add is neither RPC nor document wrapped.
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IContracts/Add", ReplyAction="http://tempuri.org/IContracts/AddResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(WCFLibrary.FaultModel), Action="http://tempuri.org/IContracts/AddFaultModelFault", Name="FaultModel", Namespace="http://schemas.datacontract.org/2004/07/WCFLibrary")]
        CsharpLibrary.ArithmeticService.ReponseMessage Add(CsharpLibrary.ArithmeticService.RequestMessage request);
        
        // CODEGEN: Generating message contract since the operation Sub is neither RPC nor document wrapped.
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IContracts/Sub", ReplyAction="http://tempuri.org/IContracts/SubResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(WCFLibrary.FaultModel), Action="http://tempuri.org/IContracts/SubFaultModelFault", Name="FaultModel", Namespace="http://schemas.datacontract.org/2004/07/WCFLibrary")]
        CsharpLibrary.ArithmeticService.ReponseMessage Sub(CsharpLibrary.ArithmeticService.RequestMessage request);
        
        // CODEGEN: Generating message contract since the operation Mul is neither RPC nor document wrapped.
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IContracts/Mul", ReplyAction="http://tempuri.org/IContracts/MulResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(WCFLibrary.FaultModel), Action="http://tempuri.org/IContracts/MulFaultModelFault", Name="FaultModel", Namespace="http://schemas.datacontract.org/2004/07/WCFLibrary")]
        CsharpLibrary.ArithmeticService.ReponseMessage Mul(CsharpLibrary.ArithmeticService.RequestMessage request);
        
        // CODEGEN: Generating message contract since the operation DivWithSoapReqRes is neither RPC nor document wrapped.
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IContracts/DivWithSoapReqRes", ReplyAction="http://tempuri.org/IContracts/DivWithSoapReqResResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(WCFLibrary.FaultModel), Action="http://tempuri.org/IContracts/DivWithSoapReqResFaultModelFault", Name="FaultModel", Namespace="http://schemas.datacontract.org/2004/07/WCFLibrary")]
        CsharpLibrary.ArithmeticService.ReponseMessage DivWithSoapReqRes(CsharpLibrary.ArithmeticService.RequestMessage request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IContracts/DivWithDataConReqRes", ReplyAction="http://tempuri.org/IContracts/DivWithDataConReqResResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(WCFLibrary.FaultModel), Action="http://tempuri.org/IContracts/DivWithDataConReqResFaultModelFault", Name="FaultModel", Namespace="http://schemas.datacontract.org/2004/07/WCFLibrary")]
        WCFLibrary.Contracts.DataContracts DivWithDataConReqRes(WCFLibrary.Contracts.DataContracts reqMessage);
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(IsWrapped=false)]
    public partial class RequestMessage {
        
        [System.ServiceModel.MessageHeaderAttribute(Namespace="http://tempuri.org/")]
        public string SoapHeader;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="www.tempuri.org", Order=0)]
        public int value1;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="www.tempuri.org", Order=1)]
        public int value2;
        
        public RequestMessage() {
        }
        
        public RequestMessage(string SoapHeader, int value1, int value2) {
            this.SoapHeader = SoapHeader;
            this.value1 = value1;
            this.value2 = value2;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(IsWrapped=false)]
    public partial class ReponseMessage {
        
        [System.ServiceModel.MessageHeaderAttribute(Namespace="http://tempuri.org/")]
        public string SoapHeader;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=0)]
        public int resultValue;
        
        public ReponseMessage() {
        }
        
        public ReponseMessage(string SoapHeader, int resultValue) {
            this.SoapHeader = SoapHeader;
            this.resultValue = resultValue;
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IContractsChannel : CsharpLibrary.ArithmeticService.IContracts, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ContractsClient : System.ServiceModel.ClientBase<CsharpLibrary.ArithmeticService.IContracts>, CsharpLibrary.ArithmeticService.IContracts {
        
        public ContractsClient() {
        }
        
        public ContractsClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public ContractsClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ContractsClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ContractsClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        CsharpLibrary.ArithmeticService.ReponseMessage CsharpLibrary.ArithmeticService.IContracts.Add(CsharpLibrary.ArithmeticService.RequestMessage request) {
            return base.Channel.Add(request);
        }
        
        public int Add(ref string SoapHeader, int value1, int value2) {
            CsharpLibrary.ArithmeticService.RequestMessage inValue = new CsharpLibrary.ArithmeticService.RequestMessage();
            inValue.SoapHeader = SoapHeader;
            inValue.value1 = value1;
            inValue.value2 = value2;
            CsharpLibrary.ArithmeticService.ReponseMessage retVal = ((CsharpLibrary.ArithmeticService.IContracts)(this)).Add(inValue);
            SoapHeader = retVal.SoapHeader;
            return retVal.resultValue;
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        CsharpLibrary.ArithmeticService.ReponseMessage CsharpLibrary.ArithmeticService.IContracts.Sub(CsharpLibrary.ArithmeticService.RequestMessage request) {
            return base.Channel.Sub(request);
        }
        
        public int Sub(ref string SoapHeader, int value1, int value2) {
            CsharpLibrary.ArithmeticService.RequestMessage inValue = new CsharpLibrary.ArithmeticService.RequestMessage();
            inValue.SoapHeader = SoapHeader;
            inValue.value1 = value1;
            inValue.value2 = value2;
            CsharpLibrary.ArithmeticService.ReponseMessage retVal = ((CsharpLibrary.ArithmeticService.IContracts)(this)).Sub(inValue);
            SoapHeader = retVal.SoapHeader;
            return retVal.resultValue;
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        CsharpLibrary.ArithmeticService.ReponseMessage CsharpLibrary.ArithmeticService.IContracts.Mul(CsharpLibrary.ArithmeticService.RequestMessage request) {
            return base.Channel.Mul(request);
        }
        
        public int Mul(ref string SoapHeader, int value1, int value2) {
            CsharpLibrary.ArithmeticService.RequestMessage inValue = new CsharpLibrary.ArithmeticService.RequestMessage();
            inValue.SoapHeader = SoapHeader;
            inValue.value1 = value1;
            inValue.value2 = value2;
            CsharpLibrary.ArithmeticService.ReponseMessage retVal = ((CsharpLibrary.ArithmeticService.IContracts)(this)).Mul(inValue);
            SoapHeader = retVal.SoapHeader;
            return retVal.resultValue;
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        CsharpLibrary.ArithmeticService.ReponseMessage CsharpLibrary.ArithmeticService.IContracts.DivWithSoapReqRes(CsharpLibrary.ArithmeticService.RequestMessage request) {
            return base.Channel.DivWithSoapReqRes(request);
        }
        
        public int DivWithSoapReqRes(ref string SoapHeader, int value1, int value2) {
            CsharpLibrary.ArithmeticService.RequestMessage inValue = new CsharpLibrary.ArithmeticService.RequestMessage();
            inValue.SoapHeader = SoapHeader;
            inValue.value1 = value1;
            inValue.value2 = value2;
            CsharpLibrary.ArithmeticService.ReponseMessage retVal = ((CsharpLibrary.ArithmeticService.IContracts)(this)).DivWithSoapReqRes(inValue);
            SoapHeader = retVal.SoapHeader;
            return retVal.resultValue;
        }
        
        public WCFLibrary.Contracts.DataContracts DivWithDataConReqRes(WCFLibrary.Contracts.DataContracts reqMessage) {
            return base.Channel.DivWithDataConReqRes(reqMessage);
        }
    }
}
